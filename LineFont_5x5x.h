#pragma once
#include <stdint.h>

// typedef struct {
//     int8_t x0, y0;
//     int8_t x1, y1;
// } LineSegment;

#define MAX_SEGMENTS 12

typedef struct {
    char c;
    uint8_t width;
    uint8_t height;
    uint8_t segment_count;
    LineSegment segments[MAX_SEGMENTS];
} Glyph5x5;

static Glyph5x5 font_5x5[] = {
    {'A', 5, 5, 3, {{0,4,2,0}, {2,0,4,4}, {1,2,3,2}, {0}}},
    {'B', 5, 5, 6, {{0,0,0,4}, {0,0,3,0}, {3,0,3,2}, {3,2,0,2}, {0,4,3,4}, {3,4,3,2}, {0}}},
    {'C', 5, 5, 3, {{0,0,0,4}, {0,0,3,0}, {0,4,3,4}, {0}}},
    {'D', 5, 5, 4, {{0,0,0,4}, {0,0,3,0}, {0,4,3,4}, {3,0,3,4}, {0}}},
    {'E', 5, 5, 4, {{0,0,0,4}, {0,0,4,0}, {0,2,3,2}, {0,4,4,4}, {0}}},
    {'F', 5, 5, 3, {{0,0,0,4}, {0,0,4,0}, {0,2,3,2}, {0}}},
    {'G', 5, 5, 5, {{0,0,0,4}, {0,0,4,0}, {0,4,4,4}, {4,4,4,2}, {4,2,2,2}, {0}}},
    {'H', 5, 5, 3, {{0,0,0,4}, {4,0,4,4}, {0,2,4,2}, {0}}},
    {'I', 5, 5, 3, {{0,0,4,0}, {2,0,2,4}, {0,4,4,4}, {0}}},
    {'J', 5, 5, 4, {{0,0,4,0}, {2,0,2,4}, {2,4,1,4}, {1,4,0,2}, {0}}},
    {'K', 5, 5, 3, {{0,0,0,4}, {0,2,3,0}, {0,2,3,4}, {0}}},
    {'L', 5, 5, 2, {{0,0,0,4}, {0,4,4,4}, {0}}},
    {'M', 5, 5, 4, {{0,0,0,4}, {0,0,2,2}, {2,2,4,0}, {4,0,4,4}, {0}}},
    {'N', 5, 5, 3, {{0,0,0,4}, {0,0,4,4}, {4,0,4,4}, {0}}},
    {'O', 5, 5, 4, {{0,0,0,4}, {0,4,4,4}, {4,4,4,0}, {4,0,0,0}, {0}}},
    {'P', 5, 5, 4, {{0,0,0,4}, {0,0,3,0}, {3,0,3,2}, {3,2,0,2}, {0}}},
    {'Q', 5, 5, 5, {{0,0,0,4}, {0,4,4,4}, {4,4,4,0}, {4,0,0,0}, {2,2,4,4}, {0}}},
    {'R', 5, 5, 5, {{0,0,0,4}, {0,0,3,0}, {3,0,3,2}, {3,2,0,2}, {0,2,3,4}, {0}}},
    {'S', 5, 5, 5, {{0,0,4,0}, {4,0,4,2}, {4,2,0,2}, {0,2,0,4}, {0,4,4,4}, {0}}},
    {'T', 5, 5, 2, {{0,0,4,0}, {2,0,2,4}}},
    {'U', 5, 5, 3, {{0,0,0,4}, {0,4,4,4}, {4,4,4,0}, {0}}},
    {'V', 5, 5, 2, {{0,0,2,4}, {2,4,4,0}, {0}}},
    {'W', 5, 5, 4, {{0,0,0,4}, {0,4,2,2}, {2,2,4,4}, {4,4,4,0}, {0}}},
    {'X', 5, 5, 2, {{0,0,4,4}, {0,4,4,0}, {0}}},
    {'Y', 5, 5, 3, {{0,0,2,2}, {4,0,2,2}, {2,2,2,4}, {0}}},
    {'Z', 5, 5, 3, {{0,0,4,0}, {4,0,0,4}, {0,4,4,4}, {0}}}
};

// Clean accessor function
Glyph5x5 *get_5x5_glyph(char c) {
    if (c >= 'A' && c <= 'Z')
        return &font_5x5[c - 'A'];
    return NULL;
}

void DrawChar_5x5(char c, uint8_t x, uint8_t y, uint8_t scale) {
    if (get_5x5_glyph(c)) {

        Glyph5x5 *g = get_5x5_glyph(c);

        for (uint8_t i = 0; i < g->segment_count; i++) {

            DrawLine((x + (g->segments[i].x1 * scale)), (y + (g->segments[i].y1 * scale)),
                     (x + (g->segments[i].x2 * scale)), (y + (g->segments[i].y2 * scale)));
        }
    }
}

void draw_text_5x5(char *str, int16_t x, int16_t y, uint8_t scale, uint8_t deph) {
    while (*str) {
        Glyph5x5 *g = get_5x5_glyph(*str++);
        if (!g)
            return;

        for (uint8_t j = 0; j < deph; j++) {
            for (uint8_t i = 0; i < g->segment_count; i++) {

                DrawLine((x + j + (g->segments[i].x1 * scale)), (y + (g->segments[i].y1 * scale)),
                         (x + j + (g->segments[i].x2 * scale)), (y + (g->segments[i].y2 * scale)));
            }
        }
        x += g->width * scale + 5; // Advance cursor
    }
}