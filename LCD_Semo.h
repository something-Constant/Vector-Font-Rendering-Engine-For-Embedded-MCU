#include <fcntl.h>
#include <io.h>
#include <locale.h>
#include <math.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <wchar.h>

#define WIDTH 128
#define HEIGHT 128
#define BufferSize ((WIDTH * HEIGHT) >> 3)

typedef struct {
    int x0;
    int y0;
    int x1;
    int y1;
    int x2;
    int y2;
    int step;
    int t;

    int x;
    int y;

} Bezier;

char Buffer[] = {};

char Mario[]  = {
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x83, 0xfe, 0x3f, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x7f, 0xfe, 0x3f, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xfe, 0x3f, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf3, 0xff, 0x00, 0x01,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xcf, 0xe0, 0x00,
    0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xcf, 0x87,
    0xff, 0x83, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00,
    0x1f, 0xc6, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe,
    0x3c, 0x1f, 0xc6, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xfe, 0x3c, 0x0f, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xfe, 0x3c, 0x07, 0xff, 0xfc, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xfe, 0x3f, 0x9f, 0x3f, 0xfc, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xcf, 0xfc, 0x01, 0xf0, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x7f, 0xe0, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x1f, 0xfe, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x3f, 0x80, 0x01, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x3f, 0x80, 0xf8, 0x31, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf9, 0xfc, 0x7f, 0x3e, 0x0c, 0x7f,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf9, 0xf3, 0xff, 0xe7, 0x8c,
    0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf9, 0xf3, 0xff, 0xe7,
    0x83, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xfc, 0x7f,
    0x9f, 0x83, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x3c,
    0x7f, 0x38, 0x73, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe,
    0x00, 0x00, 0xf8, 0x73, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xfe, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xfe, 0x30, 0x00, 0x00, 0x0f, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xfe, 0x30, 0x00, 0xc0, 0x3f, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xfe, 0x38, 0x01, 0xe0, 0x7f, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x3e, 0x07, 0xf9, 0xfc, 0x7f, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xcf, 0xfc, 0xf9, 0xf3, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0xfe, 0x0f, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff

};

void Print(char *Buffer) {

    int Width = WIDTH >> 3;
    for (int y = 0; y < HEIGHT; y++) {
        if (y)
            wprintf(L"\n");
        // printf("\n");

        for (int x = 0; x < Width; x++) {
            for (char Bit = 7; Bit >= 0; Bit--) {
                if (*Buffer & 1 << Bit)
                    wprintf(L"■");
                // printf("1");

                else
                    wprintf(L" ");
                // wprintf(L"□");

                // printf("0");
                // wprintf(L" ");
            }

            Buffer++;
        }
    }
    wprintf(L"\n\n");
    // printf("\n\n");
}

void SetPixel(uint8_t XA, uint8_t YA, char Status, char *Buffer) {

    int Index = (XA + (YA * 128)) >> 3;

    if (Status)
        Buffer[Index] |= (0x80 >> (XA % 8));

    else
        Buffer[Index] &= ~(0x80 >> (XA % 8));
}

void FillBuffer(int XOffset, int YOffset, char *Data, int Width, int Height, char *Buffer) {
    int ORGX = XOffset, Row = (Width / 8);

    int Index;

    for (int Y = 0; Y < Height; Y++) {
        for (int X = 0; X < Row; X++) {
            for (char Bit = 7; Bit >= 0; Bit--) {
                Index = (XOffset + (YOffset * 128)) >> 3;

                if (*Data & (1 << Bit))
                    Buffer[Index] |= (0x80 >> (XOffset % 8));
                else
                    Buffer[Index] &= ~(0x80 >> (XOffset % 8));

                XOffset++;
            }
            Data++;
        }
        YOffset++;
        XOffset = ORGX;
    }
}

void DrawLine(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {

    int16_t adx = (((x1 >= x0) ? x1 - x0 : x0 - x1) + 1) << 1;
    int16_t ady = (((y1 >= y0) ? y1 - y0 : y0 - y1) + 1) << 1;

    int8_t sx   = (x0 < x1) ? 1 : -1;
    int8_t sy   = (y0 < y1) ? 1 : -1;

    int16_t eps;

    if (adx > ady) {

        eps = (ady - adx) >> 1;

        for (int16_t x = x0, y = y0; sx < 0 ? x >= x1 : x <= x1; x += sx) {
            SetPixel(x, y, 1, Buffer);
            // wprintf(L"(%d,%d)\n", x, y);

            eps += ady;
            if (eps << 1 >= adx) {
                y += sy;
                eps -= adx;
            }
        }
    }
    else {
        eps = (adx - ady) >> 1;
        for (int16_t x = x0, y = y0; sy < 0 ? y >= y1 : y <= y1; y += sy) {
            SetPixel(x, y, 1, Buffer);
            // wprintf(L"(%d,%d)\n", x, y);

            eps += adx;
            if (eps << 1 >= ady) {
                x += sx;
                eps -= ady;
            }
        }
    }
}

int lerp(int min, int max, float t) {
    int x;
    x = round(max - min) * t + min;
    return x;
}

int bezier_quad_int(int p0, int p1, int p2, int t, int n) {
    int nt = n - t;
    int n2 = (n * n);

    return ((nt * nt) * p0 + 2 * nt * t * p1 + t * t * p2 + (n2 >> 1)) / n2;
}

int lerpFix(int min, int max, int t, int step) {
    if (!t)
        return 0;
    else
        return ((((max - min) * t + (step / 2)) / step) + min);
}

void bezier(Bezier *Main) {

    for (Main->t = 0; Main->t <= Main->step; Main->t++) {
        Main->x = bezier_quad_int(Main->x0, Main->x1, Main->x2, Main->t, Main->step);
        Main->y = bezier_quad_int(Main->y0, Main->y1, Main->y2, Main->t, Main->step);
        SetPixel(Main->x, Main->y, 0x01, Buffer);
    }
}

/*
void DrawLine_Modifyed(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {

    int16_t adx = ((x1 > x0) ? x1 - x0 : x0 - x1);
    int16_t ady = ((y1 > y0) ? y1 - y0 : y0 - y1);

    int8_t sx = (x0 < x1) ? 1 : -1;
    int8_t sy = (y0 < y1) ? 1 : -1;

    int16_t eps;

    if (adx > ady) {

        eps = ((ady << 1) - (adx << 1));

        for (int16_t x = x0, y = y0; sx < 0 ? x >= x1 : x <= x1; x += sx) {
            SetPixel(x, y, 1, Buffer);

            eps += ady;
            if ((eps << 1) >= adx) {
                y += sy;
                eps -= adx;
            }
        }
    }
    else {
        eps = ((adx << 1) - (ady << 1));

        for (int16_t x = x0, y = y0; sy < 0 ? y >= y1 : y <= y1; y += sy) {
            SetPixel(x, y, 1, Buffer);

            eps += adx;
            if ((eps << 1) >= ady) {
                x += sx;
                eps -= ady;
            }
        }
    }
}

void DrawLine_DDA(uint8_t X0, uint8_t Y0, uint8_t X1, uint8_t Y1) {
    int16_t dx = X1 - X0;
    int16_t dy = Y1 - Y0;

    uint8_t step;
    float xinc, yinc, X = X0, Y = Y0;

    if (abs(dx) > abs(dy))
        step = abs(dx);

    else
        step = abs(dy);

    xinc = ((float)dx / (float)step);
    yinc = ((float)dy / (float)step);

    for (uint8_t i = 0; i <= step; i++) {

        SetPixel(roundf(X), roundf(Y), 1, Buffer);
        X += xinc;
        Y += yinc;
    }
}

void DrawLine_Bresenhams(uint8_t X0, uint8_t Y0, uint8_t X1, uint8_t Y1) {
    int16_t dx = (X1 >= X0) ? X1 - X0 : X0 - X1;
    int16_t dy = (Y1 >= Y0) ? Y1 - Y0 : Y0 - Y1;

    int16_t sx = (X0 < X1) ? 1 : -1;
    int16_t sy = (Y0 < Y1) ? 1 : -1;

    // int16_t p = (2 * dy) - dx;

    // while (X0 <= X1) {

    //     SetPixel(X0, Y0, 1, Buffer);
    //     // wprintf(L"(%d,%d)\n", X0, Y0);
    //     // wprintf(L"P:%d\n",p);

    //     X0 += sx;

    //     if (p < 0) {
    //         p = p + (2 * dy);
    //     }

    //     else {
    //         p = p + (2 * dy) - (2 * dx);
    //         Y0 += sy;
    //     }
    // }

    // int16_t dx = X1 - X0;
    // int16_t dy = Y1 - Y0;

    // int16_t p = (2 * dy) - (dx);
    int16_t p;

    uint16_t x = 0, y = 0;

    while (X0 <= X1) {

        SetPixel(X0, Y0, 1, Buffer);
        wprintf(L"(%d,%d)\n", X0, Y0);

        x++;
        X0 += sx;

        p -= (dx);

        if (p >= 0) {

            // p = p +(2 * dy);
            // p = (2 * dy * x) - (2 * dx * y);
            y++;
            Y0 += sy;

            p += (2 * dy * x) - (2 * dx * y);
        }

        // else {

        //     // p = p +(2 * dy) - (2 * dx);
        //     // p = (2 * dy * X0) - (2 * dx * Y0);
        //     // p = (2 * dy * x) - (2 * dx * y);
        // }
    }
}

char Squer[4] = {

    0xff, 0xff, 0xff, 0xff};
*/