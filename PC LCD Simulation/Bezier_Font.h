#include <stdint.h>

// Quadratic BÃ©zier segment (6 bytes)
typedef struct {
    int8_t x0, y0; // Start point
    int8_t cx, cy; // Control point
    int8_t x1, y1; // End point
} QuadBezier;

// Glyph metadata
typedef struct {
    char c;            // ASCII character
    uint8_t seg_count; // Number of quad segments
    uint8_t width;     // Glyph cell width (monospaced 9)
    QuadBezier *segs;
} Glyph_Bez;

uint8_t font_data[] = {
    // 'A'
    'A',
    8,
    8,
    3,
    0,
    7,
    3,
    0,
    3,
    0,
    7,
    7,
    1,
    4,
    6,
    4,
    // 'B'
    'B',
    8,
    8,
    6,
    0,
    0,
    0,
    7,
    0,
    0,
    5,
    0,
    0,
    3,
    5,
    3,
    0,
    7,
    5,
    7,
    5,
    0,
    5,
    3,
    5,
    3,
    5,
    7,
    // 'C'
    'C',
    8,
    8,
    3,
    6,
    0,
    1,
    0,
    1,
    0,
    1,
    7,
    1,
    7,
    6,
    7,
    // 'D'
    'D',
    8,
    8,
    4,
    0,
    0,
    0,
    7,
    0,
    0,
    4,
    0,
    0,
    7,
    4,
    7,
    4,
    0,
    4,
    7,
    // 'E'
    'E',
    8,
    8,
    4,
    0,
    0,
    0,
    7,
    0,
    0,
    7,
    0,
    0,
    3,
    5,
    3,
    0,
    7,
    7,
    7,
    // 'F'
    'F',
    8,
    8,
    3,
    0,
    0,
    0,
    7,
    0,
    0,
    7,
    0,
    0,
    3,
    5,
    3,
    // 'G'
    'G',
    8,
    8,
    6,
    4,
    3,
    7,
    3,
    7,
    3,
    7,
    7,
    7,
    7,
    1,
    7,
    1,
    7,
    1,
    0,
    1,
    0,
    6,
    0,
    6,
    0,
    6,
    3,
    // 'H'
    'H',
    8,
    8,
    3,
    0,
    0,
    0,
    7,
    0,
    3,
    7,
    3,
    7,
    0,
    7,
    7,
    // 'I'
    'I',
    8,
    8,
    3,
    3,
    0,
    3,
    7,
    1,
    0,
    5,
    0,
    1,
    7,
    5,
    7,
    // 'J'
    'J',
    8,
    8,
    4,
    6,
    0,
    6,
    7,
    6,
    7,
    1,
    7,
    1,
    7,
    1,
    4,
    0,
    3,
    1,
    4,
    // 'K'
    'K',
    8,
    8,
    3,
    0,
    0,
    0,
    7,
    0,
    3,
    6,
    0,
    0,
    3,
    6,
    7,
    // 'L'
    'L',
    8,
    8,
    2,
    0,
    0,
    0,
    7,
    0,
    7,
    7,
    7,
    // 'M'
    'M',
    8,
    8,
    4,
    0,
    7,
    0,
    0,
    0,
    0,
    3,
    4,
    3,
    4,
    7,
    0,
    7,
    0,
    7,
    7,
    // 'N'
    'N',
    8,
    8,
    3,
    0,
    7,
    0,
    0,
    0,
    0,
    7,
    7,
    7,
    7,
    7,
    0,
    // 'O'
    'O',
    8,
    8,
    4,
    1,
    0,
    6,
    0,
    6,
    0,
    6,
    7,
    6,
    7,
    1,
    7,
    1,
    7,
    1,
    0,
    // 'P'
    'P',
    8,
    8,
    4,
    0,
    0,
    0,
    7,
    0,
    0,
    5,
    0,
    0,
    3,
    5,
    3,
    5,
    0,
    5,
    3,
    // 'Q'
    'Q',
    8,
    8,
    5,
    1,
    0,
    6,
    0,
    6,
    0,
    6,
    7,
    6,
    7,
    1,
    7,
    1,
    7,
    1,
    0,
    4,
    4,
    7,
    7,
    // 'R'
    'R',
    8,
    8,
    5,
    0,
    0,
    0,
    7,
    0,
    0,
    5,
    0,
    0,
    3,
    5,
    3,
    5,
    0,
    5,
    3,
    0,
    3,
    5,
    7,
    // 'S'
    'S',
    8,
    8,
    6,
    5,
    0,
    1,
    0,
    1,
    0,
    1,
    3,
    1,
    3,
    5,
    3,
    5,
    3,
    5,
    7,
    5,
    7,
    1,
    7,
    1,
    7,
    1,
    3,
    // 'T'
    'T',
    8,
    8,
    2,
    3,
    0,
    3,
    7,
    0,
    0,
    7,
    0,
    // 'U'
    'U',
    8,
    8,
    3,
    0,
    0,
    0,
    7,
    0,
    7,
    7,
    7,
    7,
    7,
    7,
    0,
    // 'V'
    'V',
    8,
    8,
    2,
    0,
    0,
    3,
    7,
    3,
    7,
    7,
    0,
    // 'W'
    'W',
    8,
    8,
    4,
    0,
    0,
    0,
    7,
    0,
    7,
    3,
    4,
    3,
    4,
    7,
    7,
    7,
    7,
    7,
    0,
    // 'X'
    'X',
    8,
    8,
    2,
    0,
    0,
    7,
    7,
    0,
    7,
    7,
    0,
    // 'Y'
    'Y',
    8,
    8,
    3,
    0,
    0,
    3,
    3,
    7,
    0,
    3,
    3,
    3,
    3,
    3,
    7,
    // 'Z'
    'Z',
    8,
    8,
    3,
    0,
    0,
    7,
    0,
    7,
    0,
    0,
    7,
    0,
    7,
    7,
    7,
    // '0'
    '0',
    8,
    8,
    6,
    2,
    0,
    5,
    0,
    5,
    0,
    7,
    2,
    7,
    2,
    7,
    5,
    7,
    5,
    5,
    7,
    5,
    7,
    2,
    7,
    2,
    7,
    0,
    5,
    0,
    5,
    0,
    2,
    0,
    2,
    2,
    0,
    // '1'
    '1',
    8,
    8,
    2,
    3,
    0,
    3,
    7,
    1,
    7,
    5,
    7,
    // '2'
    '2',
    8,
    8,
    5,
    0,
    0,
    6,
    0,
    6,
    0,
    6,
    3,
    6,
    3,
    0,
    7,
    0,
    7,
    6,
    7,
    0,
    7,
    0,
    3,
    // '3'
    '3',
    8,
    8,
    6,
    0,
    0,
    5,
    0,
    5,
    0,
    5,
    7,
    5,
    7,
    0,
    7,
    0,
    3,
    5,
    3,
    5,
    3,
    5,
    0,
    0,
    3,
    0,
    0,
    // '4'
    '4',
    8,
    8,
    3,
    0,
    0,
    0,
    3,
    0,
    3,
    6,
    3,
    6,
    0,
    6,
    7,
    // '5'
    '5',
    8,
    8,
    5,
    6,
    0,
    0,
    0,
    0,
    0,
    0,
    3,
    0,
    3,
    5,
    3,
    5,
    3,
    5,
    7,
    5,
    7,
    0,
    7,
    // '6'
    '6',
    8,
    8,
    5,
    5,
    0,
    0,
    0,
    0,
    0,
    0,
    7,
    0,
    7,
    5,
    7,
    5,
    7,
    5,
    3,
    5,
    3,
    0,
    3,
    // '7'
    '7',
    8,
    8,
    2,
    0,
    0,
    6,
    0,
    6,
    0,
    0,
    7,
    // '8'
    '8',
    8,
    8,
    4,
    0,
    0,
    6,
    0,
    6,
    0,
    6,
    7,
    6,
    7,
    0,
    7,
    0,
    7,
    0,
    0,
    0,
    3,
    6,
    3,
    // '9'
    '9',
    8,
    8,
    5,
    0,
    7,
    6,
    7,
    6,
    7,
    6,
    0,
    6,
    0,
    0,
    0,
    0,
    0,
    0,
    3,
    0,
    3,
    6,
    3,
    // '+'
    '+',
    8,
    8,
    2,
    3,
    1,
    3,
    6,
    0,
    3,
    6,
    3,
    // '-'
    '-',
    8,
    8,
    1,
    0,
    3,
    6,
    3,
    // '*'
    '*',
    8,
    8,
    6,
    3,
    1,
    3,
    6,
    1,
    3,
    5,
    3,
    2,
    2,
    4,
    4,
    2,
    4,
    4,
    2,
    0,
    3,
    6,
    3,
    3,
    1,
    3,
    6,
    // '/'
    '/',
    8,
    8,
    1,
    0,
    7,
    7,
    0,
    // '?'
    '?',
    8,
    8,
    5,
    0,
    0,
    3,
    0,
    3,
    0,
    6,
    3,
    6,
    3,
    6,
    5,
    6,
    5,
    3,
    7,
    3,
    5,
    3,
    6,
    // '!'
    '!',
    8,
    8,
    2,
    3,
    0,
    3,
    5,
    3,
    7,
    3,
    7,
    // '%'
    '%',
    8,
    8,
    5,
    0,
    0,
    7,
    7,
    1,
    1,
    2,
    1,
    2,
    1,
    1,
    2,
    1,
    2,
    2,
    2,
    5,
    5,
    6,
    5,
    6,
    5,
    5,
    6,
    5,
    6,
    6,
    6,
    // '('
    '(',
    8,
    8,
    3,
    4,
    0,
    2,
    2,
    2,
    2,
    2,
    5,
    2,
    5,
    4,
    7,
    // ')'
    ')',
    8,
    8,
    3,
    2,
    0,
    4,
    2,
    4,
    2,
    4,
    5,
    4,
    5,
    2,
    7,
    // '='
    '=',
    8,
    8,
    2,
    0,
    2,
    7,
    2,
    0,
    5,
    7,
    5,
    // ';'
    ';',
    8,
    8,
    2,
    3,
    5,
    3,
    7,
    2,
    7,
    3,
    7,
    // ':'
    ':',
    8,
    8,
    2,
    3,
    1,
    3,
    2,
    3,
    5,
    3,
    6,
    // ','
    ',',
    8,
    8,
    1,
    3,
    6,
    2,
    7,
    // '.'
    '.',
    8,
    8,
    1,
    3,
    6,
    3,
    7,
    // '"'
    '"',
    8,
    8,
    2,
    2,
    0,
    2,
    2,
    5,
    0,
    5,
    2,
    // '\''
    '\'',
    8,
    8,
    1,
    3,
    0,
    3,
    2,
};

/*
// -------------------------------
// Digits 0-9 (monospaced)
// -------------------------------
static QuadBezier _0_segs[] = {
    {2,1, 4,0, 6,1},
    {6,1, 8,3, 8,5},
    {8,5, 8,7, 6,8},
    {6,8, 4,9, 2,8},
    {2,8, 0,6, 0,5},
    {0,5, 0,3, 2,1}
};

static QuadBezier _1_segs[] = {
    {4,0, 4,0, 4,7},
    {3,7, 4,9, 5,9}
};

static QuadBezier _2_segs[] = {
    {1,2, 3,0, 6,0},
    {6,0, 8,0, 8,2},
    {8,2, 2,6, 1,9},
    {1,9, 8,9, 8,9}
};

static QuadBezier _3_segs[] = {
    {1,2, 3,0, 6,0},
    {6,0, 8,2, 6,4},
    {6,4, 8,6, 6,8},
    {6,8, 3,9, 1,7}
};

static QuadBezier _4_segs[] = {
    {7,0, 2,5, 2,5},
    {2,5, 8,5, 8,5},
    {8,0, 8,9, 8,9}
};

static QuadBezier _5_segs[] = {
    {8,0, 2,0, 1,0},
    {1,0, 1,4, 6,4},
    {6,4, 8,6, 7,9},
    {7,9, 3,9, 1,7}
};

static QuadBezier _6_segs[] = {
    {7,2, 5,0, 2,1},
    {2,1, 0,3, 0,6},
    {0,6, 2,8, 5,8},
    {5,8, 7,8, 7,6},
    {7,6, 5,5, 2,5}
};

static QuadBezier _7_segs[] = {
    {1,1, 8,1, 8,1},
    {8,1, 2,9, 2,9}
};

static QuadBezier _8_segs[] = {
    {4,2, 6,0, 7,2},
    {7,2, 8,4, 6,5},
    {6,5, 8,6, 7,8},
    {7,8, 5,9, 4,7},
    {4,7, 2,6, 3,4}
};

static QuadBezier _9_segs[] = {
    {6,6, 8,4, 8,2},
    {8,2, 6,0, 4,1},
    {4,1, 2,2, 2,4},
    {2,4, 3,6, 5,6}
};

// -------------------------------
// Symbols: ! % _ - ? + *
// -------------------------------
static QuadBezier _excl_segs[] = {
    {4,1, 4,2, 4,7}, // stem (inverted Y: top small number is towards top)
    {4,8, 4,8, 4,8}  // dot
};

static QuadBezier _percent_segs[] = {
    {0,8, 3,5, 6,2},
    {2,2, 2,2, 2,2}, // small circle top-left (degenerate low-res)
    {6,6, 6,6, 6,6}  // small circle bottom-right
};

static QuadBezier _underscore_segs[] = {
    {0,9, 4,9, 8,9}
};

static QuadBezier _minus_segs[] = {
    {1,5, 4,5, 7,5}
};

static QuadBezier _quest_segs[] = {
    {2,1, 4,0, 6,1},
    {6,1, 7,3, 5,4},
    {5,6, 5,6, 5,7},
    {5,8, 5,8, 5,8}
};

static QuadBezier _plus_segs[] = {
    {4,1, 4,4, 4,7},
    {1,4, 4,4, 7,4}
};

static QuadBezier _asterisk_segs[] = {
    {4,0, 4,3, 4,6},
    {1,2, 7,2, 7,2},
    {1,6, 7,6, 7,6}
};

// -------------------------------
// Font lookup table (monospaced width = 9)
// -------------------------------
// static Glyph_Bez bezier_font[] = {
//     {'A', 3, 9, A_segs},
//     {'B', 5, 9, B_segs},
//     {'C', 4, 9, C_segs},
//     {'D', 3, 9, D_segs},
//     {'E', 4, 9, E_segs},
//     {'F', 3, 9, F_segs},
//     {'G', 5, 9, G_segs},
//     {'H', 3, 9, H_segs},
//     {'I', 1, 9, I_segs},
//     {'J', 2, 9, J_segs},
//     {'K', 2, 9, K_segs},
//     {'L', 2, 9, L_segs},
//     {'M', 4, 9, M_segs},
//     {'N', 3, 9, N_segs},
//     {'O', 6, 9, O_segs},
//     {'P', 3, 9, P_segs},
//     {'Q', 5, 9, Q_segs},
//     {'R', 4, 9, R_segs},
//     {'S', 5, 9, S_segs},
//     {'T', 2, 9, T_segs},
//     {'U', 3, 9, U_segs},
//     {'V', 2, 9, V_segs},
//     {'W', 3, 9, W_segs},
//     {'X', 2, 9, X_segs},
//     {'Y', 2, 9, Y_segs},
//     {'Z', 3, 9, Z_segs},

//     {'0', 6, 9, _0_segs},
//     {'1', 2, 9, _1_segs},
//     {'2', 4, 9, _2_segs},
//     {'3', 4, 9, _3_segs},
//     {'4', 3, 9, _4_segs},
//     {'5', 4, 9, _5_segs},
//     {'6', 5, 9, _6_segs},
//     {'7', 2, 9, _7_segs},
//     {'8', 5, 9, _8_segs},
//     {'9', 4, 9, _9_segs},

//     {'!', 2, 9, _excl_segs},
//     {'%', 3, 9, _percent_segs},
//     {'_', 1, 9, _underscore_segs},
//     {'-', 1, 9, _minus_segs},
//     {'?', 4, 9, _quest_segs},
//     {'+', 2, 9, _plus_segs},
//     {'*', 3, 9, _asterisk_segs}
// };

// Font array definition
// Glyph_Bez bezier_font[] = {
//     {'A', 3, 5, A_segs}, {'B', 5, 5, B_segs}, {'C', 3, 5, C_segs},
//     {'D', 4, 5, D_segs}, {'E', 4, 5, E_segs}, {'F', 3, 5, F_segs},
//     {'G', 5, 5, G_segs}, {'H', 3, 5, H_segs}, {'I', 3, 5, I_segs},
//     {'J', 4, 5, J_segs}, {'K', 3, 5, K_segs}, {'L', 2, 5, L_segs},
//     {'M', 3, 5, M_segs}, {'N', 3, 5, N_segs}, {'O', 4, 5, O_segs},
//     {'P', 4, 5, P_segs}, {'Q', 5, 5, Q_segs}, {'R', 5, 5, R_segs},
//     {'S', 5, 5, S_segs}, {'T', 2, 5, T_segs}, {'U', 3, 5, U_segs},
//     {'V', 1, 5, V_segs}, {'W', 2, 5, W_segs}, {'X', 2, 5, X_segs},
//     {'Y', 2, 5, Y_segs}, {'Z', 3, 5, Z_segs}
// };

// // Lookup function
// Glyph_Bez *get_glyph_Bez(char c) {
//     // Accept uppercase letters; if lowercase supplied, convert
//     if (c >= 'a' && c <= 'z') c -= 32;
//     for (uint8_t i = 0; i < sizeof(bezier_font) / sizeof(Glyph_Bez); i++) {
//         if (bezier_font[i].c == c)
//             return &bezier_font[i];
//     }
//     return NULL; // not found
// }

// NOTE: This file contains only glyph definitions. Use your existing GLCD drawing
// routines and quadratic bezier rasterizer to render the glyphs (each QuadBezier has
// coords in the GLCD coordinate system: X=0..8, Y=0..9 with 0 at the top).
*/

QuadBezier B_segs[] = {
    {0, 0, 0, 0, 0, 7}, // Left vertical
    {0, 0, 5, 0, 5, 0}, // Top curve
    {0, 3, 5, 3, 5, 3}, // Middle curve
    {0, 7, 5, 7, 5, 7}, // Bottom curve
    {5, 0, 5, 3, 5, 7}  // Right vertical
};

Glyph_Bez font[] = {'B', 5, 5, B_segs};

Glyph_Bez *get_glyph_BezGlyph(char c) {
    for (uint8_t i = 0; i < sizeof(font) / sizeof(Glyph_Bez); i++) {
        if (font[i].c == c || font[i].c == (c - 32))
            return &font[i];
    }
    return NULL;
}

void draw_text_bezier(char *str, int16_t x, int16_t y, uint8_t scale, uint8_t deph) {
    while (*str) {
        Glyph_Bez *g = get_glyph_BezGlyph(*str++);
        if (! g)
            return;

        Bezier line = {.step = 30};
        for (uint8_t j = 0; j < deph; j++) {
            for (uint8_t i = 0; i < g->seg_count; i++) {
                line.x0 = (j + x + g->segs[i].x0 * scale);
                line.x1 = (j + x + g->segs[i].cx * scale);
                line.x2 = (j + x + g->segs[i].x1 * scale);

                line.y0 = (y + g->segs[i].y0 * scale);
                line.y1 = (y + g->segs[i].cy * scale);
                line.y2 = (y + g->segs[i].y1 * scale);

                bezier(&line);
            }
        }
        x += g->width * scale + 5;
    }
}

void Berzier_DrawChar(char c, uint8_t x, uint8_t y, uint8_t scale, uint8_t deph) {
    if (get_glyph_BezGlyph(c)) {
        Glyph_Bez *g = get_glyph_BezGlyph(c);

        Bezier line;
        line.step = 10;

        for (uint8_t j = 0; j < deph; j++) {
            for (uint8_t i = 0; i < g->seg_count; i++) {
                line.x0 = (j + x + g->segs[i].x0 * scale);
                line.x1 = (j + x + g->segs[i].cx * scale);
                line.x2 = (j + x + g->segs[i].x1 * scale);

                line.y0 = (y + g->segs[i].y0 * scale);
                line.y1 = (y + g->segs[i].cy * scale);
                line.y2 = (y + g->segs[i].y1 * scale);

                bezier(&line);
            }
        }
    }
}
